var _gre_ory$amnezic_elm$Update$apply_selected_card = F3(
	function (player_id, selected_card, score) {
		return _elm_lang$core$Native_Utils.eq(selected_card.player_id, player_id) ? (score + selected_card.engaged_point) : score;
	});
var _gre_ory$amnezic_elm$Update$apply_selected_cards_on_player = F3(
	function (selected_cards, player_id, player) {
		return _elm_lang$core$Native_Utils.update(
			player,
			{
				score: A3(
					_elm_lang$core$Array$foldr,
					_gre_ory$amnezic_elm$Update$apply_selected_card(player_id),
					player.score,
					selected_cards)
			});
	});
var _gre_ory$amnezic_elm$Update$apply_selected_cards = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			players: A2(
				_elm_lang$core$Array$indexedMap,
				_gre_ory$amnezic_elm$Update$apply_selected_cards_on_player(model.state.selected_cards),
				model.players)
		});
};
var _gre_ory$amnezic_elm$Update$compute_engaged_point = F5(
	function (score_mode, nb_player, nb_selected_card, velociy_id, selected_card) {
		var point_per_velocity = (_elm_lang$core$Native_Utils.cmp(velociy_id, nb_player) < 0) ? (nb_player - velociy_id) : 1;
		var sign = selected_card.correct ? 1 : -1;
		var _p0 = score_mode;
		if (_p0.ctor === 'ScoreByVelocity') {
			return _elm_lang$core$Native_Utils.update(
				selected_card,
				{engaged_point: sign * point_per_velocity});
		} else {
			return _elm_lang$core$Native_Utils.update(
				selected_card,
				{engaged_point: sign});
		}
	});
var _gre_ory$amnezic_elm$Update$compute_engaged_points = F3(
	function (score_mode, nb_player, selected_cards) {
		var nb_selected_card = _elm_lang$core$Array$length(selected_cards);
		return A2(
			_elm_lang$core$Array$indexedMap,
			A3(_gre_ory$amnezic_elm$Update$compute_engaged_point, score_mode, nb_player, nb_selected_card),
			selected_cards);
	});
var _gre_ory$amnezic_elm$Update$update_selected_cards = F3(
	function (update_fn, nb_player, state) {
		var score_mode = state.score_mode;
		return _elm_lang$core$Native_Utils.update(
			state,
			{
				selected_cards: A3(
					_gre_ory$amnezic_elm$Update$compute_engaged_points,
					score_mode,
					nb_player,
					update_fn(state.selected_cards))
			});
	});
var _gre_ory$amnezic_elm$Update$unselect_card = F3(
	function (model, choice_id, player_id) {
		var update_fn = _elm_lang$core$Array$filter(
			A2(_gre_ory$amnezic_elm$Type$unmatch_selected_card, choice_id, player_id));
		var nb_player = _elm_lang$core$Array$length(model.players);
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				state: A3(_gre_ory$amnezic_elm$Update$update_selected_cards, update_fn, nb_player, model.state)
			});
	});
var _gre_ory$amnezic_elm$Update$select_card = F3(
	function (model, choice_id, player_id) {
		var _p1 = A2(_gre_ory$amnezic_elm$Type$get_choice, model, choice_id);
		if (_p1.ctor === 'Just') {
			var selected_card = A3(_gre_ory$amnezic_elm$Init$init_selected_card, choice_id, player_id, _p1._0.correct);
			var update_fn = _elm_lang$core$Array$push(selected_card);
			var nb_player = _elm_lang$core$Array$length(model.players);
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					state: A3(_gre_ory$amnezic_elm$Update$update_selected_cards, update_fn, nb_player, model.state)
				});
		} else {
			return model;
		}
	});
var _gre_ory$amnezic_elm$Update$reset_selected_cards = function (state) {
	return _elm_lang$core$Native_Utils.update(
		state,
		{
			selected_cards: _elm_lang$core$Array$fromList(
				{ctor: '[]'})
		});
};
var _gre_ory$amnezic_elm$Update$remove_selected_cards = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			state: _gre_ory$amnezic_elm$Update$reset_selected_cards(model.state)
		});
};
var _gre_ory$amnezic_elm$Update$apply_engaged_points = function (model) {
	return _gre_ory$amnezic_elm$Update$remove_selected_cards(
		_gre_ory$amnezic_elm$Update$apply_selected_cards(model));
};
var _gre_ory$amnezic_elm$Update$update_player_active = F2(
	function (active, player) {
		return _elm_lang$core$Native_Utils.update(
			player,
			{active: active});
	});
var _gre_ory$amnezic_elm$Update$update_player_name = F2(
	function (name, player) {
		return _elm_lang$core$Native_Utils.update(
			player,
			{name: name});
	});
var _gre_ory$amnezic_elm$Update$update_player_card_suit_id = F2(
	function (maybe_card_suit_id, player) {
		return _elm_lang$core$Native_Utils.update(
			player,
			{maybe_card_suit_id: maybe_card_suit_id});
	});
var _gre_ory$amnezic_elm$Update$update_player = F3(
	function (model, player_id, update_player_fn) {
		var _p2 = A2(_elm_lang$core$Array$get, player_id, model.players);
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					players: A3(
						_elm_lang$core$Array$set,
						player_id,
						update_player_fn(_p2._0),
						model.players)
				});
		} else {
			return model;
		}
	});
var _gre_ory$amnezic_elm$Update$update_state_for_new_question = F2(
	function (question_id, state) {
		return _elm_lang$core$Native_Utils.update(
			state,
			{
				question_id: question_id,
				step: _gre_ory$amnezic_elm$Type$StepNotReady,
				media_status: _gre_ory$amnezic_elm$Type$MediaNotReady,
				selected_cards: _elm_lang$core$Array$fromList(
					{ctor: '[]'})
			});
	});
var _gre_ory$amnezic_elm$Update$update_state_step = F2(
	function (step, state) {
		return _elm_lang$core$Native_Utils.update(
			state,
			{step: step});
	});
var _gre_ory$amnezic_elm$Update$update_step = F2(
	function (step, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				state: A2(_gre_ory$amnezic_elm$Update$update_state_step, step, model.state)
			});
	});
var _gre_ory$amnezic_elm$Update$update_state_page = F2(
	function (page, state) {
		return _elm_lang$core$Native_Utils.update(
			state,
			{page: page});
	});
var _gre_ory$amnezic_elm$Update$update_page = F2(
	function (page, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				state: A2(_gre_ory$amnezic_elm$Update$update_state_page, page, model.state)
			});
	});
var _gre_ory$amnezic_elm$Update$delete_player = F2(
	function (model, player_id) {
		if (A2(_gre_ory$amnezic_elm$Type$can_delete_player, model, player_id)) {
			var after = (_elm_lang$core$Native_Utils.cmp(
				player_id,
				_elm_lang$core$Array$length(model.players)) < 0) ? A3(
				_elm_lang$core$Array$slice,
				player_id + 1,
				_elm_lang$core$Array$length(model.players),
				model.players) : _elm_lang$core$Array$fromList(
				{ctor: '[]'});
			var before = (_elm_lang$core$Native_Utils.cmp(0, player_id) < 0) ? A3(_elm_lang$core$Array$slice, 0, player_id, model.players) : _elm_lang$core$Array$fromList(
				{ctor: '[]'});
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					players: A2(_elm_lang$core$Array$append, before, after)
				});
		} else {
			return model;
		}
	});
var _gre_ory$amnezic_elm$Update$activate_player = F2(
	function (model, player_id) {
		if (A2(_gre_ory$amnezic_elm$Type$can_activate_player, model, player_id)) {
			var _p3 = A2(_gre_ory$amnezic_elm$Type$get_player, model, player_id);
			if (_p3.ctor === 'Just') {
				return A3(
					_gre_ory$amnezic_elm$Update$update_player,
					model,
					player_id,
					_gre_ory$amnezic_elm$Update$update_player_active(true));
			} else {
				return model;
			}
		} else {
			return model;
		}
	});
var _gre_ory$amnezic_elm$Update$deactivate_player = F2(
	function (model, player_id) {
		if (A2(_gre_ory$amnezic_elm$Type$can_deactivate_player, model, player_id)) {
			var _p4 = A2(_gre_ory$amnezic_elm$Type$get_player, model, player_id);
			if (_p4.ctor === 'Just') {
				return A3(
					_gre_ory$amnezic_elm$Update$update_player,
					model,
					player_id,
					_gre_ory$amnezic_elm$Update$update_player_active(false));
			} else {
				return model;
			}
		} else {
			return model;
		}
	});
var _gre_ory$amnezic_elm$Update$add_player = function (model) {
	return _gre_ory$amnezic_elm$Type$can_add_player(model) ? _elm_lang$core$Native_Utils.update(
		model,
		{
			players: A2(
				_elm_lang$core$Array$push,
				_gre_ory$amnezic_elm$Init$init_default_player(
					_elm_lang$core$Array$length(model.players)),
				model.players)
		}) : model;
};
var _gre_ory$amnezic_elm$Update$go_to_question = F2(
	function (model, question_id) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				state: A2(_gre_ory$amnezic_elm$Update$update_state_for_new_question, question_id, model.state)
			});
	});
var _gre_ory$amnezic_elm$Update$next_question_id = function (model) {
	return model.state.question_id + 1;
};
var _gre_ory$amnezic_elm$Update$can_go_to_next_question = function (model) {
	return _elm_lang$core$Native_Utils.cmp(
		_gre_ory$amnezic_elm$Update$next_question_id(model),
		_elm_lang$core$Array$length(model.questions)) < 0;
};
var _gre_ory$amnezic_elm$Update$go_to_next_question = function (model) {
	return _gre_ory$amnezic_elm$Update$can_go_to_next_question(model) ? A2(
		_gre_ory$amnezic_elm$Update$go_to_question,
		model,
		_gre_ory$amnezic_elm$Update$next_question_id(model)) : A2(_gre_ory$amnezic_elm$Update$update_page, _gre_ory$amnezic_elm$Type$PageScore, model);
};
var _gre_ory$amnezic_elm$Update$go_to_next_step = function (model) {
	if (_gre_ory$amnezic_elm$Type$can_go_to_next_step(model)) {
		var _p5 = model.state.step;
		switch (_p5.ctor) {
			case 'StepNotReady':
				return A2(_gre_ory$amnezic_elm$Update$update_step, _gre_ory$amnezic_elm$Type$StepShowChoices, model);
			case 'StepShowChoices':
				return A2(_gre_ory$amnezic_elm$Update$update_step, _gre_ory$amnezic_elm$Type$StepShowHints, model);
			case 'StepShowHints':
				return A2(_gre_ory$amnezic_elm$Update$update_step, _gre_ory$amnezic_elm$Type$StepShowCorrect, model);
			case 'StepShowCorrect':
				return A2(_gre_ory$amnezic_elm$Update$update_step, _gre_ory$amnezic_elm$Type$StepShowCards, model);
			case 'StepShowCards':
				return A2(
					_gre_ory$amnezic_elm$Update$update_step,
					_gre_ory$amnezic_elm$Type$StepShowScore,
					_gre_ory$amnezic_elm$Update$apply_engaged_points(model));
			default:
				return _gre_ory$amnezic_elm$Update$go_to_next_question(model);
		}
	} else {
		return model;
	}
};
var _gre_ory$amnezic_elm$Update$reset_game = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{state: _gre_ory$amnezic_elm$Init$init_state});
};
var _gre_ory$amnezic_elm$Update$go_to_start_page = function (model) {
	return _gre_ory$amnezic_elm$Type$can_go_to_start_page(model) ? _gre_ory$amnezic_elm$Update$reset_game(model) : model;
};
var _gre_ory$amnezic_elm$Update$go_to_previous_page = function (model) {
	var _p6 = model.state.page;
	switch (_p6.ctor) {
		case 'PageStart':
			return _gre_ory$amnezic_elm$Update$go_to_start_page(model);
		case 'PageThemes':
			return A2(_gre_ory$amnezic_elm$Update$update_page, _gre_ory$amnezic_elm$Type$PageStart, model);
		case 'PagePlayers':
			return A2(_gre_ory$amnezic_elm$Update$update_page, _gre_ory$amnezic_elm$Type$PageThemes, model);
		case 'PageQuestions':
			return A2(_gre_ory$amnezic_elm$Update$update_page, _gre_ory$amnezic_elm$Type$PagePlayers, model);
		case 'PageScore':
			return A2(_gre_ory$amnezic_elm$Update$update_page, _gre_ory$amnezic_elm$Type$PageQuestions, model);
		default:
			return A2(_gre_ory$amnezic_elm$Update$update_page, _gre_ory$amnezic_elm$Type$PageScore, model);
	}
};
var _gre_ory$amnezic_elm$Update$go_to_next_page = function (model) {
	if (_gre_ory$amnezic_elm$Type$can_go_to_next_page(model)) {
		var _p7 = model.state.page;
		switch (_p7.ctor) {
			case 'PageStart':
				return A2(_gre_ory$amnezic_elm$Update$update_page, _gre_ory$amnezic_elm$Type$PageThemes, model);
			case 'PageThemes':
				return A2(_gre_ory$amnezic_elm$Update$update_page, _gre_ory$amnezic_elm$Type$PagePlayers, model);
			case 'PagePlayers':
				return A2(_gre_ory$amnezic_elm$Update$update_page, _gre_ory$amnezic_elm$Type$PageQuestions, model);
			case 'PageQuestions':
				return _gre_ory$amnezic_elm$Update$go_to_next_step(model);
			case 'PageScore':
				return A2(_gre_ory$amnezic_elm$Update$update_page, _gre_ory$amnezic_elm$Type$PageEnd, model);
			default:
				return _gre_ory$amnezic_elm$Update$go_to_start_page(model);
		}
	} else {
		return model;
	}
};
var _gre_ory$amnezic_elm$Update$get_key = function (key_code) {
	var _p8 = key_code;
	switch (_p8) {
		case 32:
			return _gre_ory$amnezic_elm$Type$Space;
		case 37:
			return _gre_ory$amnezic_elm$Type$ArrowLeft;
		case 39:
			return _gre_ory$amnezic_elm$Type$ArrowRight;
		default:
			return _gre_ory$amnezic_elm$Type$Unknown;
	}
};
