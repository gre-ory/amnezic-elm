var _gre_ory$amnezic_elm$View$render_player_score = F2(
	function (rank_id, player) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'player rank-',
						_elm_lang$core$Basics$toString(
							_gre_ory$amnezic_elm$Type$id_to_nb(rank_id)))),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(player.name),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(player.score)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _gre_ory$amnezic_elm$View$render_player_scores = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('scores'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$indexedMap,
			_gre_ory$amnezic_elm$View$render_player_score,
			_elm_lang$core$List$reverse(
				A2(
					_elm_lang$core$List$sortBy,
					function (_) {
						return _.score;
					},
					_elm_lang$core$Array$toList(model.players)))));
};
var _gre_ory$amnezic_elm$View$render_correct_class = function (maybe_is_correct) {
	var _p0 = maybe_is_correct;
	if (_p0.ctor === 'Just') {
		return _p0._0 ? 'correct' : 'incorrect';
	} else {
		return '';
	}
};
var _gre_ory$amnezic_elm$View$render_choice_class = F2(
	function (model, choice_id) {
		var _p1 = A2(_gre_ory$amnezic_elm$Type$get_choice, model, choice_id);
		if (_p1.ctor === 'Just') {
			return _gre_ory$amnezic_elm$View$render_correct_class(
				_elm_lang$core$Maybe$Just(_p1._0.correct));
		} else {
			return _gre_ory$amnezic_elm$View$render_correct_class(_elm_lang$core$Maybe$Nothing);
		}
	});
var _gre_ory$amnezic_elm$View$render_questions_progress = function (model) {
	var question_max = _gre_ory$amnezic_elm$Type$id_to_nb(
		_elm_lang$core$Array$length(model.questions) - 1);
	var question_now = _gre_ory$amnezic_elm$Type$id_to_nb(model.state.question_id);
	var question_min = _gre_ory$amnezic_elm$Type$id_to_nb(0);
	var progress_percent = ((((question_now - question_min) + 1) * 100) / ((question_max - question_min) + 1)) | 0;
	var progress_style = A2(
		_elm_lang$core$Basics_ops['++'],
		'width: ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(progress_percent),
			'%;'));
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('row'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Question ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(question_now),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' / ',
							_elm_lang$core$Basics$toString(question_max))))),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('progress'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('progress-bar'),
								_1: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'progressbar'),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$html$Html_Attributes$attribute, 'style', progress_style),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html_Attributes$attribute,
												'aria-valuenow',
												_elm_lang$core$Basics$toString(question_now)),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html_Attributes$attribute,
													'aria-valuemin',
													_elm_lang$core$Basics$toString(question_min)),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html_Attributes$attribute,
														'aria-valuemax',
														_elm_lang$core$Basics$toString(question_max)),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _gre_ory$amnezic_elm$View$render_playing_card = F5(
	function (card_type, card_color, maybe_card_rank, extra_class, on_click) {
		var card_rank_class = function () {
			var _p2 = maybe_card_rank;
			if (_p2.ctor === 'Just') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'card-rank-',
					_elm_lang$core$Basics$toString(_p2._0));
			} else {
				return 'card-no-rank';
			}
		}();
		var card_color_class = _elm_lang$core$String$isEmpty(card_color) ? 'card-no-color' : A2(_elm_lang$core$Basics_ops['++'], 'card-color-', card_color);
		var card_type_class = _elm_lang$core$String$isEmpty(card_type) ? 'card-no-type' : A2(_elm_lang$core$Basics_ops['++'], 'card-type-', card_type);
		var classes = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: 'card',
				_1: {
					ctor: '::',
					_0: card_type_class,
					_1: {
						ctor: '::',
						_0: card_color_class,
						_1: {
							ctor: '::',
							_0: card_rank_class,
							_1: {
								ctor: '::',
								_0: extra_class,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(classes),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(on_click),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: function () {
					var _p3 = maybe_card_rank;
					if (_p3.ctor === 'Just') {
						return A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('rank'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(_p3._0)),
								_1: {ctor: '[]'}
							});
					} else {
						return A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('rank'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'});
					}
				}(),
				_1: {ctor: '[]'}
			});
	});
var _gre_ory$amnezic_elm$View$render_card = F4(
	function (model, choice_id, player_id, player) {
		var card_rank = _elm_lang$core$Maybe$Just(
			_gre_ory$amnezic_elm$Type$id_to_nb(choice_id));
		var selected = A3(_gre_ory$amnezic_elm$Type$has_selected_card, choice_id, player_id, model);
		var on_click = (!selected) ? A2(_gre_ory$amnezic_elm$Type$SelectCard, choice_id, player_id) : A2(_gre_ory$amnezic_elm$Type$UnselectCard, choice_id, player_id);
		var classes = selected ? ' selected' : '';
		return player.active ? A5(_gre_ory$amnezic_elm$View$render_playing_card, player.card_type, player.card_color, card_rank, classes, on_click) : A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _gre_ory$amnezic_elm$View$render_cards = F2(
	function (model, choice_id) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('cards'),
				_1: {ctor: '[]'}
			},
			_elm_lang$core$Array$toList(
				A2(
					_elm_lang$core$Array$indexedMap,
					A2(_gre_ory$amnezic_elm$View$render_card, model, choice_id),
					model.players)));
	});
var _gre_ory$amnezic_elm$View$render_choice = F3(
	function (model, choice_id, choice) {
		var classes = _gre_ory$amnezic_elm$Type$show_result(model.state.step) ? A2(
			_elm_lang$core$Basics_ops['++'],
			'choice ',
			A2(_gre_ory$amnezic_elm$View$render_choice_class, model, choice_id)) : 'choice';
		var _p4 = model.state.step;
		switch (_p4.ctor) {
			case 'StepNotReady':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('loading question...'),
						_1: {ctor: '[]'}
					});
			case 'StepShowChoices':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('answer'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(choice.answer),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('hint'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(' --- '),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
			case 'StepShowHints':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('answer'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(choice.answer),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('hint'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(choice.hint),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
			case 'StepShowCorrect':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('answer'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(choice.answer),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('hint'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(choice.hint),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
			case 'StepShowCards':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(_gre_ory$amnezic_elm$View$render_cards, model, choice_id),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('answer'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(choice.answer),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('hint'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(choice.hint),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					});
			default:
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('answer'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(choice.answer),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('hint'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(choice.hint),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
		}
	});
var _gre_ory$amnezic_elm$View$render_card_type = F4(
	function (model, player_id, card_type_id, card_type) {
		var _p5 = A2(_gre_ory$amnezic_elm$Type$get_player, model, player_id);
		if (_p5.ctor === 'Just') {
			var _p6 = _p5._0;
			var is_owned_by_player = _elm_lang$core$Native_Utils.eq(_p6.card_type, card_type);
			var is_owned_by_other = (!is_owned_by_player) && A3(_gre_ory$amnezic_elm$Type$is_card_type_and_color_already_selected, card_type, _p6.card_color, model);
			var on_click = is_owned_by_player ? _gre_ory$amnezic_elm$Type$UnselectCardType(player_id) : (is_owned_by_other ? _gre_ory$amnezic_elm$Type$NothingToDo : A2(_gre_ory$amnezic_elm$Type$SelectCardType, player_id, card_type));
			var extra_class = is_owned_by_player ? 'selected-by-player' : (is_owned_by_other ? 'not-selectable' : 'selectable');
			return A5(_gre_ory$amnezic_elm$View$render_playing_card, card_type, _p6.card_color, _elm_lang$core$Maybe$Nothing, extra_class, on_click);
		} else {
			return A2(
				_elm_lang$html$Html$span,
				{ctor: '[]'},
				{ctor: '[]'});
		}
	});
var _gre_ory$amnezic_elm$View$render_card_types = F2(
	function (model, player_id) {
		return A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			_elm_lang$core$Array$toList(
				A2(
					_elm_lang$core$Array$indexedMap,
					A2(_gre_ory$amnezic_elm$View$render_card_type, model, player_id),
					model.available_card_types)));
	});
var _gre_ory$amnezic_elm$View$render_card_color = F4(
	function (model, player_id, card_color_id, card_color) {
		var _p7 = A2(_gre_ory$amnezic_elm$Type$get_player, model, player_id);
		if (_p7.ctor === 'Just') {
			var _p8 = _p7._0;
			var is_owned_by_player = _elm_lang$core$Native_Utils.eq(_p8.card_color, card_color);
			var is_owned_by_other = (!is_owned_by_player) && A3(_gre_ory$amnezic_elm$Type$is_card_type_and_color_already_selected, _p8.card_type, card_color, model);
			var on_click = is_owned_by_player ? _gre_ory$amnezic_elm$Type$UnselectCardColor(player_id) : (is_owned_by_other ? _gre_ory$amnezic_elm$Type$NothingToDo : A2(_gre_ory$amnezic_elm$Type$SelectCardColor, player_id, card_color));
			var extra_class = is_owned_by_player ? 'selected-by-player' : (is_owned_by_other ? 'not-selectable' : 'selectable');
			return A5(_gre_ory$amnezic_elm$View$render_playing_card, _p8.card_type, card_color, _elm_lang$core$Maybe$Nothing, extra_class, on_click);
		} else {
			return A2(
				_elm_lang$html$Html$span,
				{ctor: '[]'},
				{ctor: '[]'});
		}
	});
var _gre_ory$amnezic_elm$View$render_card_colors = F2(
	function (model, player_id) {
		return A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			_elm_lang$core$Array$toList(
				A2(
					_elm_lang$core$Array$indexedMap,
					A2(_gre_ory$amnezic_elm$View$render_card_color, model, player_id),
					model.available_card_colors)));
	});
var _gre_ory$amnezic_elm$View$render_footer = function (model) {
	return {
		ctor: '::',
		_0: _elm_lang$html$Html$text('@amnezic'),
		_1: {ctor: '[]'}
	};
};
var _gre_ory$amnezic_elm$View$render_material_icon = function (icon_class) {
	return _elm_lang$core$String$isEmpty(icon_class) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$i,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('icon material-icons'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(icon_class),
			_1: {ctor: '[]'}
		});
};
var _gre_ory$amnezic_elm$View$render_button = F5(
	function (icon_class, button_class, button_text, button_description, on_click) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(_elm_lang$core$Basics_ops['++'], 'button ', button_class)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$title(button_description),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(on_click),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$core$String$isEmpty(icon_class) ? A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{ctor: '[]'}) : A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('button-icon'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _gre_ory$amnezic_elm$View$render_material_icon(icon_class),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('button-text'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(button_text),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _gre_ory$amnezic_elm$View$render_activated_button = F4(
	function (icon_class, button_class, button_text, button_description) {
		return A5(
			_gre_ory$amnezic_elm$View$render_button,
			icon_class,
			A2(_elm_lang$core$Basics_ops['++'], 'activated ', button_class),
			button_text,
			button_description,
			_gre_ory$amnezic_elm$Type$NothingToDo);
	});
var _gre_ory$amnezic_elm$View$render_enabled_button = F5(
	function (icon_class, button_class, button_text, button_description, on_click) {
		return A5(
			_gre_ory$amnezic_elm$View$render_button,
			icon_class,
			A2(_elm_lang$core$Basics_ops['++'], 'enabled ', button_class),
			button_text,
			button_description,
			on_click);
	});
var _gre_ory$amnezic_elm$View$render_add_player_button = function (model) {
	return _gre_ory$amnezic_elm$Type$can_add_player(model) ? A5(_gre_ory$amnezic_elm$View$render_enabled_button, 'person_add', 'player-add', 'Add', 'Add player', _gre_ory$amnezic_elm$Type$AddPlayer) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
};
var _gre_ory$amnezic_elm$View$render_deactivate_player_button = F2(
	function (model, player_id) {
		return A2(_gre_ory$amnezic_elm$Type$can_deactivate_player, model, player_id) ? A5(
			_gre_ory$amnezic_elm$View$render_enabled_button,
			'',
			'player-deactivate',
			'Deactivate',
			'Deactivate player',
			_gre_ory$amnezic_elm$Type$DeactivatePlayer(player_id)) : A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _gre_ory$amnezic_elm$View$render_activate_player_button = F2(
	function (model, player_id) {
		return A2(_gre_ory$amnezic_elm$Type$can_activate_player, model, player_id) ? A5(
			_gre_ory$amnezic_elm$View$render_enabled_button,
			'',
			'player-activate',
			'Activate',
			'Activate player',
			_gre_ory$amnezic_elm$Type$ActivatePlayer(player_id)) : A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _gre_ory$amnezic_elm$View$render_disabled_button = F4(
	function (icon_class, button_class, button_text, button_description) {
		return A5(
			_gre_ory$amnezic_elm$View$render_button,
			icon_class,
			A2(_elm_lang$core$Basics_ops['++'], 'disabled ', button_class),
			button_text,
			button_description,
			_gre_ory$amnezic_elm$Type$NothingToDo);
	});
var _gre_ory$amnezic_elm$View$render_nav_item = F4(
	function (model, target_page, icon_class, page_name) {
		var on_click = _gre_ory$amnezic_elm$Type$GoToPage(target_page);
		var button_description = A2(
			_elm_lang$core$Basics_ops['++'],
			'Go to ',
			A2(_elm_lang$core$Basics_ops['++'], page_name, 'page'));
		var button_text = page_name;
		var button_class = A2(_elm_lang$core$Basics_ops['++'], 'go-to-', page_name);
		return A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('navbar-item'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.eq(model.state.page, target_page) ? A4(_gre_ory$amnezic_elm$View$render_activated_button, icon_class, button_class, button_text, button_description) : (A2(_gre_ory$amnezic_elm$Type$can_go_to_page, model, target_page) ? A5(_gre_ory$amnezic_elm$View$render_enabled_button, icon_class, button_class, button_text, button_description, on_click) : A4(_gre_ory$amnezic_elm$View$render_disabled_button, icon_class, button_class, button_text, button_description)),
				_1: {ctor: '[]'}
			});
	});
var _gre_ory$amnezic_elm$View$render_header = function (model) {
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$nav,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('navbar'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('navbar-brand'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('@mnez!c'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('navbar-items'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A4(_gre_ory$amnezic_elm$View$render_nav_item, model, _gre_ory$amnezic_elm$Type$PageStart, 'home', 'Start'),
							_1: {
								ctor: '::',
								_0: A4(_gre_ory$amnezic_elm$View$render_nav_item, model, _gre_ory$amnezic_elm$Type$PageThemes, 'menu', 'Themes'),
								_1: {
									ctor: '::',
									_0: A4(_gre_ory$amnezic_elm$View$render_nav_item, model, _gre_ory$amnezic_elm$Type$PagePlayers, 'people', 'Players'),
									_1: {
										ctor: '::',
										_0: A4(_gre_ory$amnezic_elm$View$render_nav_item, model, _gre_ory$amnezic_elm$Type$PageQuestions, 'queue_music', 'Question'),
										_1: {
											ctor: '::',
											_0: A4(_gre_ory$amnezic_elm$View$render_nav_item, model, _gre_ory$amnezic_elm$Type$PageScore, 'grade', 'Score'),
											_1: {
												ctor: '::',
												_0: A4(_gre_ory$amnezic_elm$View$render_nav_item, model, _gre_ory$amnezic_elm$Type$PageEnd, '', 'End'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('navbar-nav'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A5(_gre_ory$amnezic_elm$View$render_enabled_button, 'keyboard_arrow_right', 'move-forward', 'Next', 'Next step', _gre_ory$amnezic_elm$Type$MoveForward),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	};
};
var _gre_ory$amnezic_elm$View$render_delete_player_button = F2(
	function (model, player_id) {
		return A2(_gre_ory$amnezic_elm$Type$can_delete_player, model, player_id) ? A5(
			_gre_ory$amnezic_elm$View$render_enabled_button,
			'',
			'player-delete',
			'Delete',
			'Delete player',
			_gre_ory$amnezic_elm$Type$DeletePlayer(player_id)) : A4(_gre_ory$amnezic_elm$View$render_disabled_button, '', 'player-delete', 'Delete', 'Delete player');
	});
var _gre_ory$amnezic_elm$View$render_error = function (message) {
	return _elm_lang$html$Html$text(message);
};
var _gre_ory$amnezic_elm$View$render_page_skeleton = F3(
	function (model, page_id, html_elements) {
		var html_content = _elm_lang$core$List$isEmpty(html_elements) ? {
			ctor: '::',
			_0: _gre_ory$amnezic_elm$View$render_error(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'page ',
					A2(_elm_lang$core$Basics_ops['++'], page_id, ' not yet implemented!'))),
			_1: {ctor: '[]'}
		} : html_elements;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(_elm_lang$core$Basics_ops['++'], 'page ', page_id)),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('page-header'),
						_1: {ctor: '[]'}
					},
					_gre_ory$amnezic_elm$View$render_header(model)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('page-content'),
							_1: {ctor: '[]'}
						},
						html_content),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('page-footer'),
								_1: {ctor: '[]'}
							},
							_gre_ory$amnezic_elm$View$render_footer(model)),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _gre_ory$amnezic_elm$View$render_default_page = F2(
	function (model, page_id) {
		return A3(
			_gre_ory$amnezic_elm$View$render_page_skeleton,
			model,
			page_id,
			{ctor: '[]'});
	});
var _gre_ory$amnezic_elm$View$render_id_to_nb = function (id) {
	return _elm_lang$html$Html$text(
		_elm_lang$core$Basics$toString(
			_gre_ory$amnezic_elm$Type$id_to_nb(id)));
};
var _gre_ory$amnezic_elm$View$render_player = F3(
	function (model, player_id, player) {
		var classes = player.active ? (_gre_ory$amnezic_elm$Type$has_card_type_and_color(player) ? 'player active valid' : 'player active invalid') : (_gre_ory$amnezic_elm$Type$has_card_type_and_color(player) ? 'player inactive valid' : 'player inactive invalid');
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(classes),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _gre_ory$amnezic_elm$View$render_id_to_nb(player_id),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(' - '),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('player name'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(
										_gre_ory$amnezic_elm$Type$UpdatePlayerName(player_id)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(player.name),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(_gre_ory$amnezic_elm$View$render_deactivate_player_button, model, player_id),
							_1: {
								ctor: '::',
								_0: A2(_gre_ory$amnezic_elm$View$render_activate_player_button, model, player_id),
								_1: {
									ctor: '::',
									_0: A2(_gre_ory$amnezic_elm$View$render_delete_player_button, model, player_id),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('status'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													A2(
														_elm_lang$core$Basics_ops['++'],
														'score: ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(player.score),
															' pt(s)'))),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(_elm_lang$core$Basics_ops['++'], ', status: ', classes)),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(_gre_ory$amnezic_elm$View$render_card_types, model, player_id),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text(' | '),
														_1: {
															ctor: '::',
															_0: A2(_gre_ory$amnezic_elm$View$render_card_colors, model, player_id),
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _gre_ory$amnezic_elm$View$render_players = function (model) {
	var html_add_player = _gre_ory$amnezic_elm$Type$can_add_player(model) ? A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('player'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _gre_ory$amnezic_elm$View$render_add_player_button(model),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	var html_players = A2(
		_elm_lang$core$List$append,
		_elm_lang$core$Array$toList(
			A2(
				_elm_lang$core$Array$indexedMap,
				_gre_ory$amnezic_elm$View$render_player(model),
				model.players)),
		{
			ctor: '::',
			_0: html_add_player,
			_1: {ctor: '[]'}
		});
	var warning_notification = (!_gre_ory$amnezic_elm$Type$all_player_has_card_type_and_color(model)) ? A2(
		_elm_lang$html$Html$span,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('alert alert-warning'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('please select one card type and color for each player!'),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'});
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('row'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: warning_notification,
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('players'),
					_1: {ctor: '[]'}
				},
				html_players),
			_1: {ctor: '[]'}
		}
	};
};
var _gre_ory$amnezic_elm$View$render_players_page = F2(
	function (model, page_id) {
		return A3(
			_gre_ory$amnezic_elm$View$render_page_skeleton,
			model,
			page_id,
			_gre_ory$amnezic_elm$View$render_players(model));
	});
var _gre_ory$amnezic_elm$View$render_selected_card = F2(
	function (selected_card_id, selected_card) {
		var classes = A2(
			_elm_lang$core$Basics_ops['++'],
			'selected_card ',
			_gre_ory$amnezic_elm$View$render_correct_class(
				_elm_lang$core$Maybe$Just(selected_card.correct)));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(classes),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						A2(_gre_ory$amnezic_elm$Type$UnselectCard, selected_card.choice_id, selected_card.player_id)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('P'),
						_1: {
							ctor: '::',
							_0: _gre_ory$amnezic_elm$View$render_id_to_nb(selected_card.player_id),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: selected_card.correct ? _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'+',
									_elm_lang$core$Basics$toString(selected_card.engaged_point))) : _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(selected_card.engaged_point)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _gre_ory$amnezic_elm$View$render_selected_cards = function (state) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('selected_cards'),
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Array$toList(
			A2(_elm_lang$core$Array$indexedMap, _gre_ory$amnezic_elm$View$render_selected_card, state.selected_cards)));
};
var _gre_ory$amnezic_elm$View$render_question = function (model) {
	var _p9 = _gre_ory$amnezic_elm$Type$get_question(model);
	if (_p9.ctor === 'Just') {
		var _p10 = _p9._0;
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('row theme'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(_p10.theme),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('row audio'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(_p10.audio),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('row question'),
							_1: {ctor: '[]'}
						},
						_elm_lang$core$Array$toList(
							A2(
								_elm_lang$core$Array$indexedMap,
								_gre_ory$amnezic_elm$View$render_choice(model),
								_p10.choices))),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$fieldset,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _gre_ory$amnezic_elm$View$render_selected_cards(model.state),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$fieldset,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _gre_ory$amnezic_elm$View$render_player_scores(model),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		};
	} else {
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('row question'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _gre_ory$amnezic_elm$View$render_error('unknown question!'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		};
	}
};
var _gre_ory$amnezic_elm$View$render_questions = function (model) {
	return A2(
		_elm_lang$core$List$append,
		{
			ctor: '::',
			_0: _gre_ory$amnezic_elm$View$render_questions_progress(model),
			_1: {ctor: '[]'}
		},
		_gre_ory$amnezic_elm$View$render_question(model));
};
var _gre_ory$amnezic_elm$View$render_questions_page = F2(
	function (model, page_id) {
		return A3(
			_gre_ory$amnezic_elm$View$render_page_skeleton,
			model,
			page_id,
			_gre_ory$amnezic_elm$View$render_questions(model));
	});
var _gre_ory$amnezic_elm$View$render_page = function (model) {
	var _p11 = model.state.page;
	switch (_p11.ctor) {
		case 'PageStart':
			return A2(_gre_ory$amnezic_elm$View$render_default_page, model, 'start');
		case 'PageThemes':
			return A2(_gre_ory$amnezic_elm$View$render_default_page, model, 'themes');
		case 'PagePlayers':
			return A2(_gre_ory$amnezic_elm$View$render_players_page, model, 'players');
		case 'PageQuestions':
			return A2(_gre_ory$amnezic_elm$View$render_questions_page, model, 'questions');
		case 'PageScore':
			return A2(_gre_ory$amnezic_elm$View$render_default_page, model, 'score');
		default:
			return A2(_gre_ory$amnezic_elm$View$render_default_page, model, 'end');
	}
};
