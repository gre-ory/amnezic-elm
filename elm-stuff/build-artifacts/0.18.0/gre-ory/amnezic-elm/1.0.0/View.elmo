var _gre_ory$amnezic_elm$View$render_player_score = F2(
	function (rank_id, player) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'player rank-',
						_gre_ory$amnezic_elm$Type$id_to_nb(rank_id))),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(player.name),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(player.score)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _gre_ory$amnezic_elm$View$render_player_scores = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('scores'),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$indexedMap,
			_gre_ory$amnezic_elm$View$render_player_score,
			_elm_lang$core$List$reverse(
				A2(
					_elm_lang$core$List$sortBy,
					function (_) {
						return _.score;
					},
					_elm_lang$core$Array$toList(model.players)))));
};
var _gre_ory$amnezic_elm$View$render_correct_class = function (maybe_is_correct) {
	var _p0 = maybe_is_correct;
	if (_p0.ctor === 'Just') {
		return _p0._0 ? 'correct' : 'incorrect';
	} else {
		return '';
	}
};
var _gre_ory$amnezic_elm$View$render_choice_class = F2(
	function (model, choice_id) {
		var _p1 = A2(_gre_ory$amnezic_elm$Type$get_choice, model, choice_id);
		if (_p1.ctor === 'Just') {
			return _gre_ory$amnezic_elm$View$render_correct_class(
				_elm_lang$core$Maybe$Just(_p1._0.correct));
		} else {
			return _gre_ory$amnezic_elm$View$render_correct_class(_elm_lang$core$Maybe$Nothing);
		}
	});
var _gre_ory$amnezic_elm$View$get_card_suit_class = function (card_suit) {
	var _p2 = card_suit;
	switch (_p2.ctor) {
		case 'Heart':
			return 'heart';
		case 'Diamond':
			return 'diamond';
		case 'Club':
			return 'club';
		case 'Spade':
			return 'spade';
		case 'TarotHeart':
			return 'tarot-heart';
		case 'TarotDiamond':
			return 'tarot-diamond';
		case 'TarotClub':
			return 'tarot-club';
		case 'TarotSpade':
			return 'tarot-spade';
		case 'TarotTrump':
			return 'tarot-trump';
		case 'UnoRed':
			return 'uno-red';
		case 'UnoBlue':
			return 'uno-blue';
		case 'UnoGreen':
			return 'uno-green';
		default:
			return 'uno-yellow';
	}
};
var _gre_ory$amnezic_elm$View$render_playing_card = F4(
	function (card_suit, maybe_rank, extra_class, on_click) {
		var rank_class = function () {
			var _p3 = maybe_rank;
			if (_p3.ctor === 'Just') {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'rank-',
					_elm_lang$core$Basics$toString(_p3._0));
			} else {
				return 'no-rank';
			}
		}();
		var card_suit_class = A2(
			_elm_lang$core$Basics_ops['++'],
			'suit-',
			_gre_ory$amnezic_elm$View$get_card_suit_class(card_suit));
		var classes = A2(
			_elm_lang$core$String$join,
			' ',
			{
				ctor: '::',
				_0: 'card',
				_1: {
					ctor: '::',
					_0: card_suit_class,
					_1: {
						ctor: '::',
						_0: rank_class,
						_1: {
							ctor: '::',
							_0: extra_class,
							_1: {ctor: '[]'}
						}
					}
				}
			});
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(classes),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(on_click),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: function () {
					var _p4 = maybe_rank;
					if (_p4.ctor === 'Just') {
						return A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('rank'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(_p4._0)),
								_1: {ctor: '[]'}
							});
					} else {
						return A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('rank'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'});
					}
				}(),
				_1: {ctor: '[]'}
			});
	});
var _gre_ory$amnezic_elm$View$render_tarot_playing_card = F4(
	function (card_suit, maybe_rank, extra_class, on_click) {
		return A4(_gre_ory$amnezic_elm$View$render_playing_card, card_suit, maybe_rank, extra_class, on_click);
	});
var _gre_ory$amnezic_elm$View$render_uno_playing_card = F4(
	function (card_suit, maybe_rank, extra_class, on_click) {
		return A4(_gre_ory$amnezic_elm$View$render_playing_card, card_suit, maybe_rank, extra_class, on_click);
	});
var _gre_ory$amnezic_elm$View$get_render_card_fn = function (card_suit) {
	var render_card_fn = function () {
		var _p5 = card_suit;
		switch (_p5.ctor) {
			case 'Heart':
				return _gre_ory$amnezic_elm$View$render_playing_card;
			case 'Diamond':
				return _gre_ory$amnezic_elm$View$render_playing_card;
			case 'Club':
				return _gre_ory$amnezic_elm$View$render_playing_card;
			case 'Spade':
				return _gre_ory$amnezic_elm$View$render_playing_card;
			case 'TarotHeart':
				return _gre_ory$amnezic_elm$View$render_tarot_playing_card;
			case 'TarotDiamond':
				return _gre_ory$amnezic_elm$View$render_tarot_playing_card;
			case 'TarotClub':
				return _gre_ory$amnezic_elm$View$render_tarot_playing_card;
			case 'TarotSpade':
				return _gre_ory$amnezic_elm$View$render_tarot_playing_card;
			case 'TarotTrump':
				return _gre_ory$amnezic_elm$View$render_tarot_playing_card;
			case 'UnoRed':
				return _gre_ory$amnezic_elm$View$render_uno_playing_card;
			case 'UnoBlue':
				return _gre_ory$amnezic_elm$View$render_uno_playing_card;
			case 'UnoGreen':
				return _gre_ory$amnezic_elm$View$render_uno_playing_card;
			default:
				return _gre_ory$amnezic_elm$View$render_uno_playing_card;
		}
	}();
	return render_card_fn(card_suit);
};
var _gre_ory$amnezic_elm$View$render_card_suit = F4(
	function (model, player_id, card_suit_id, card_suit) {
		var _p6 = A2(_gre_ory$amnezic_elm$Type$get_player, model, player_id);
		if (_p6.ctor === 'Just') {
			var is_owned_by_player = function () {
				var _p7 = _p6._0.maybe_card_suit_id;
				if (_p7.ctor === 'Just') {
					return _elm_lang$core$Native_Utils.eq(_p7._0, card_suit_id);
				} else {
					return false;
				}
			}();
			var is_owned_by_other = is_owned_by_player ? false : A2(_gre_ory$amnezic_elm$Type$is_card_suit_already_selected, card_suit_id, model);
			var on_click = is_owned_by_player ? _gre_ory$amnezic_elm$Type$UnselectCardSuit(player_id) : (is_owned_by_other ? _gre_ory$amnezic_elm$Type$NothingToDo : A2(_gre_ory$amnezic_elm$Type$SelectCardSuit, player_id, card_suit_id));
			var extra_class = is_owned_by_player ? 'selected-by-player' : (is_owned_by_other ? 'not-selectable' : 'selectable');
			return A4(_gre_ory$amnezic_elm$View$get_render_card_fn, card_suit, _elm_lang$core$Maybe$Nothing, extra_class, on_click);
		} else {
			return A2(
				_elm_lang$html$Html$span,
				{ctor: '[]'},
				{ctor: '[]'});
		}
	});
var _gre_ory$amnezic_elm$View$render_card_suits = F2(
	function (model, player_id) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			_elm_lang$core$Array$toList(
				A2(
					_elm_lang$core$Array$indexedMap,
					A2(_gre_ory$amnezic_elm$View$render_card_suit, model, player_id),
					model.card_suits)));
	});
var _gre_ory$amnezic_elm$View$render_error = function (message) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(message),
			_1: {ctor: '[]'}
		});
};
var _gre_ory$amnezic_elm$View$render_footer = function (model) {
	return A2(
		_elm_lang$html$Html$fieldset,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('@amnezic'),
			_1: {ctor: '[]'}
		});
};
var _gre_ory$amnezic_elm$View$render_button = F4(
	function (button_icon, button_text, button_class, maybe_on_click) {
		var _p8 = maybe_on_click;
		if (_p8.ctor === 'Just') {
			return A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class(
						A2(_elm_lang$core$Basics_ops['++'], 'btn btn-default ', button_class)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_p8._0),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$title(button_text),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class(
								A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-', button_icon)),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		} else {
			return A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class(
						A2(_elm_lang$core$Basics_ops['++'], 'btn btn-default disabled ', button_class)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$title(button_text),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class(
								A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-', button_icon)),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		}
	});
var _gre_ory$amnezic_elm$View$render_delete_player_button = F2(
	function (model, player_id) {
		var maybe_on_click = A2(_gre_ory$amnezic_elm$Type$can_delete_player, model, player_id) ? _elm_lang$core$Maybe$Just(
			_gre_ory$amnezic_elm$Type$DeletePlayer(player_id)) : _elm_lang$core$Maybe$Nothing;
		return A4(_gre_ory$amnezic_elm$View$render_button, 'trash', 'player delete', 'Delete player', maybe_on_click);
	});
var _gre_ory$amnezic_elm$View$render_activate_player_button = F2(
	function (model, player_id) {
		return A2(_gre_ory$amnezic_elm$Type$can_activate_player, model, player_id) ? A4(
			_gre_ory$amnezic_elm$View$render_button,
			'play',
			'player activate',
			'Activate player',
			_elm_lang$core$Maybe$Just(
				_gre_ory$amnezic_elm$Type$ActivatePlayer(player_id))) : A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _gre_ory$amnezic_elm$View$render_deactivate_player_button = F2(
	function (model, player_id) {
		return A2(_gre_ory$amnezic_elm$Type$can_deactivate_player, model, player_id) ? A4(
			_gre_ory$amnezic_elm$View$render_button,
			'pause',
			'player deactivate',
			'Deactivate player',
			_elm_lang$core$Maybe$Just(
				_gre_ory$amnezic_elm$Type$DeactivatePlayer(player_id))) : A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _gre_ory$amnezic_elm$View$render_add_player_button = function (model) {
	var maybe_on_click = _gre_ory$amnezic_elm$Type$can_add_player(model) ? _elm_lang$core$Maybe$Just(_gre_ory$amnezic_elm$Type$AddPlayer) : _elm_lang$core$Maybe$Nothing;
	return A4(_gre_ory$amnezic_elm$View$render_button, 'plus', 'player add', 'Add player', maybe_on_click);
};
var _gre_ory$amnezic_elm$View$render_next_button = function (model) {
	var maybe_on_click = _gre_ory$amnezic_elm$Type$can_go_to_next_page(model) ? _elm_lang$core$Maybe$Just(
		_gre_ory$amnezic_elm$Type$GoToNextPage(model)) : _elm_lang$core$Maybe$Nothing;
	return A4(_gre_ory$amnezic_elm$View$render_button, 'chevron-right', 'navigation next', 'Next', maybe_on_click);
};
var _gre_ory$amnezic_elm$View$render_previous_button = function (model) {
	var maybe_on_click = _gre_ory$amnezic_elm$Type$can_go_to_previous_page(model) ? _elm_lang$core$Maybe$Just(
		_gre_ory$amnezic_elm$Type$GoToPreviousPage(model)) : _elm_lang$core$Maybe$Nothing;
	return A4(_gre_ory$amnezic_elm$View$render_button, 'chevron-left', 'navigation previous', 'Previous', maybe_on_click);
};
var _gre_ory$amnezic_elm$View$render_start_button = function (model) {
	var maybe_on_click = _gre_ory$amnezic_elm$Type$can_go_to_start_page(model) ? _elm_lang$core$Maybe$Just(
		_gre_ory$amnezic_elm$Type$GoToStartPage(model)) : _elm_lang$core$Maybe$Nothing;
	return A4(_gre_ory$amnezic_elm$View$render_button, 'repeat', 'navigation start', 'Start', maybe_on_click);
};
var _gre_ory$amnezic_elm$View$render_header = function (model) {
	return A2(
		_elm_lang$html$Html$fieldset,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _gre_ory$amnezic_elm$View$render_start_button(model),
			_1: {
				ctor: '::',
				_0: _gre_ory$amnezic_elm$View$render_previous_button(model),
				_1: {
					ctor: '::',
					_0: _gre_ory$amnezic_elm$View$render_next_button(model),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _gre_ory$amnezic_elm$View$render_page_skeleton = F3(
	function (model, page_id, html_content) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _gre_ory$amnezic_elm$View$render_header(model),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$fieldset,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class(
								A2(_elm_lang$core$Basics_ops['++'], 'page ', page_id)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: html_content,
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _gre_ory$amnezic_elm$View$render_footer(model),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _gre_ory$amnezic_elm$View$render_default_page = F2(
	function (model, page_id) {
		return A3(
			_gre_ory$amnezic_elm$View$render_page_skeleton,
			model,
			page_id,
			_elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'page ',
					A2(_elm_lang$core$Basics_ops['++'], page_id, ' not yet implemented!'))));
	});
var _gre_ory$amnezic_elm$View$render_id_to_nb = function (id) {
	return _elm_lang$html$Html$text(
		_gre_ory$amnezic_elm$Type$id_to_nb(id));
};
var _gre_ory$amnezic_elm$View$render_player = F3(
	function (model, player_id, player) {
		var classes = 'player';
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(classes),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _gre_ory$amnezic_elm$View$render_id_to_nb(player_id),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							' -- ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								player.name,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' -- ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(player.score),
										' -- '))))),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('player name'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(
										_gre_ory$amnezic_elm$Type$UpdatePlayerName(player_id)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(player.name),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(_gre_ory$amnezic_elm$View$render_deactivate_player_button, model, player_id),
							_1: {
								ctor: '::',
								_0: A2(_gre_ory$amnezic_elm$View$render_activate_player_button, model, player_id),
								_1: {
									ctor: '::',
									_0: A2(_gre_ory$amnezic_elm$View$render_delete_player_button, model, player_id),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text(' -- '),
										_1: {
											ctor: '::',
											_0: A2(_gre_ory$amnezic_elm$View$render_card_suits, model, player_id),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _gre_ory$amnezic_elm$View$render_players = function (model) {
	var warning_notification = _gre_ory$amnezic_elm$Type$all_player_has_card_suit(model) ? A2(
		_elm_lang$html$Html$span,
		{ctor: '[]'},
		{ctor: '[]'}) : A2(
		_elm_lang$html$Html$span,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('alert alert-warning'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('please select one card for each player!'),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: warning_notification,
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					_elm_lang$core$Array$toList(
						A2(
							_elm_lang$core$Array$indexedMap,
							_gre_ory$amnezic_elm$View$render_player(model),
							model.players))),
				_1: {
					ctor: '::',
					_0: _gre_ory$amnezic_elm$View$render_add_player_button(model),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _gre_ory$amnezic_elm$View$render_players_page = F2(
	function (model, page_id) {
		return A3(
			_gre_ory$amnezic_elm$View$render_page_skeleton,
			model,
			page_id,
			_gre_ory$amnezic_elm$View$render_players(model));
	});
var _gre_ory$amnezic_elm$View$render_card = F4(
	function (model, choice_id, player_id, player) {
		var selected = A3(_gre_ory$amnezic_elm$Type$has_selected_card, choice_id, player_id, model);
		var on_click = (!selected) ? A2(_gre_ory$amnezic_elm$Type$SelectCard, choice_id, player_id) : _gre_ory$amnezic_elm$Type$NothingToDo;
		var classes = A2(
			_elm_lang$core$Basics_ops['++'],
			'card ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_gre_ory$amnezic_elm$View$render_choice_class, model, choice_id),
				selected ? ' selected' : ''));
		return player.active ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(classes),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(on_click),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('P'),
				_1: {
					ctor: '::',
					_0: _gre_ory$amnezic_elm$View$render_id_to_nb(player_id),
					_1: {ctor: '[]'}
				}
			}) : A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
	});
var _gre_ory$amnezic_elm$View$render_cards = F2(
	function (model, choice_id) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('cards'),
				_1: {ctor: '[]'}
			},
			_elm_lang$core$Array$toList(
				A2(
					_elm_lang$core$Array$indexedMap,
					A2(_gre_ory$amnezic_elm$View$render_card, model, choice_id),
					model.players)));
	});
var _gre_ory$amnezic_elm$View$render_choice = F3(
	function (model, choice_id, choice) {
		var classes = _gre_ory$amnezic_elm$Type$show_result(model.state.step) ? A2(
			_elm_lang$core$Basics_ops['++'],
			'choice ',
			A2(_gre_ory$amnezic_elm$View$render_choice_class, model, choice_id)) : 'choice';
		var _p9 = model.state.step;
		switch (_p9.ctor) {
			case 'StepNotReady':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('loading question...'),
						_1: {ctor: '[]'}
					});
			case 'StepShowChoices':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('answer'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(choice.answer),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('hint'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(' --- '),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
			case 'StepShowHints':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('answer'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(choice.answer),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('hint'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(choice.hint),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
			case 'StepShowCorrect':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('answer'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(choice.answer),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('hint'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(choice.hint),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
			case 'StepShowCards':
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(_gre_ory$amnezic_elm$View$render_cards, model, choice_id),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('answer'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(choice.answer),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('hint'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(choice.hint),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					});
			default:
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class(classes),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('answer'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(choice.answer),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('hint'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(choice.hint),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
		}
	});
var _gre_ory$amnezic_elm$View$render_selected_card = F2(
	function (selected_card_id, selected_card) {
		var classes = A2(
			_elm_lang$core$Basics_ops['++'],
			'selected_card ',
			_gre_ory$amnezic_elm$View$render_correct_class(
				_elm_lang$core$Maybe$Just(selected_card.correct)));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(classes),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						A2(_gre_ory$amnezic_elm$Type$UnselectCard, selected_card.choice_id, selected_card.player_id)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('P'),
						_1: {
							ctor: '::',
							_0: _gre_ory$amnezic_elm$View$render_id_to_nb(selected_card.player_id),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: selected_card.correct ? _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'+',
									_elm_lang$core$Basics$toString(selected_card.engaged_point))) : _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(selected_card.engaged_point)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _gre_ory$amnezic_elm$View$render_selected_cards = function (state) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('selected_cards'),
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Array$toList(
			A2(_elm_lang$core$Array$indexedMap, _gre_ory$amnezic_elm$View$render_selected_card, state.selected_cards)));
};
var _gre_ory$amnezic_elm$View$render_question = F2(
	function (model, question) {
		var classes = _elm_lang$core$Native_Utils.eq(model.state.question_id, 1) ? 'question first' : 'question';
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(classes),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$fieldset,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(question.theme),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$fieldset,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(question.audio),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$fieldset,
							{ctor: '[]'},
							_elm_lang$core$Array$toList(
								A2(
									_elm_lang$core$Array$indexedMap,
									_gre_ory$amnezic_elm$View$render_choice(model),
									question.choices))),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$fieldset,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _gre_ory$amnezic_elm$View$render_selected_cards(model.state),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$fieldset,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _gre_ory$amnezic_elm$View$render_player_scores(model),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	});
var _gre_ory$amnezic_elm$View$render_questions = function (model) {
	var _p10 = _gre_ory$amnezic_elm$Type$get_question(model);
	if (_p10.ctor === 'Just') {
		return A2(_gre_ory$amnezic_elm$View$render_question, model, _p10._0);
	} else {
		return _gre_ory$amnezic_elm$View$render_error('unknown question!');
	}
};
var _gre_ory$amnezic_elm$View$render_questions_page = F2(
	function (model, page_id) {
		return A3(
			_gre_ory$amnezic_elm$View$render_page_skeleton,
			model,
			page_id,
			_gre_ory$amnezic_elm$View$render_questions(model));
	});
var _gre_ory$amnezic_elm$View$render_page = function (model) {
	var _p11 = model.state.page;
	switch (_p11.ctor) {
		case 'PageStart':
			return A2(_gre_ory$amnezic_elm$View$render_default_page, model, 'start');
		case 'PageThemes':
			return A2(_gre_ory$amnezic_elm$View$render_default_page, model, 'themes');
		case 'PagePlayers':
			return A2(_gre_ory$amnezic_elm$View$render_players_page, model, 'players');
		case 'PageQuestions':
			return A2(_gre_ory$amnezic_elm$View$render_questions_page, model, 'questions');
		case 'PageScore':
			return A2(_gre_ory$amnezic_elm$View$render_default_page, model, 'score');
		default:
			return A2(_gre_ory$amnezic_elm$View$render_default_page, model, 'end');
	}
};
