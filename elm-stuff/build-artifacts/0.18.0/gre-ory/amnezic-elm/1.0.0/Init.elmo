var _gre_ory$amnezic_elm$Init$init_selected_card = F3(
	function (choice_id, player_id, correct) {
		return {choice_id: choice_id, player_id: player_id, engaged_point: 0, correct: correct};
	});
var _gre_ory$amnezic_elm$Init$init_default_choice = F2(
	function (choice_id, correct) {
		return {
			answer: A2(
				_elm_lang$core$Basics_ops['++'],
				'Answer ',
				_elm_lang$core$Basics$toString(
					_gre_ory$amnezic_elm$Type$id_to_nb(choice_id))),
			hint: A2(
				_elm_lang$core$Basics_ops['++'],
				'Hint ',
				_elm_lang$core$Basics$toString(
					_gre_ory$amnezic_elm$Type$id_to_nb(choice_id))),
			correct: correct
		};
	});
var _gre_ory$amnezic_elm$Init$init_default_question = function (question_id) {
	return {
		theme: A2(
			_elm_lang$core$Basics_ops['++'],
			'Theme ',
			_elm_lang$core$Basics$toString(
				_gre_ory$amnezic_elm$Type$id_to_nb(question_id))),
		audio: A2(
			_elm_lang$core$Basics_ops['++'],
			'audio_',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(
					_gre_ory$amnezic_elm$Type$id_to_nb(question_id)),
				'.mp3')),
		choices: _elm_lang$core$Array$fromList(
			{
				ctor: '::',
				_0: A2(_gre_ory$amnezic_elm$Init$init_default_choice, 0, false),
				_1: {
					ctor: '::',
					_0: A2(_gre_ory$amnezic_elm$Init$init_default_choice, 1, true),
					_1: {
						ctor: '::',
						_0: A2(_gre_ory$amnezic_elm$Init$init_default_choice, 2, false),
						_1: {
							ctor: '::',
							_0: A2(_gre_ory$amnezic_elm$Init$init_default_choice, 3, false),
							_1: {ctor: '[]'}
						}
					}
				}
			})
	};
};
var _gre_ory$amnezic_elm$Init$init_default_questions = A2(_elm_lang$core$Array$initialize, 4, _gre_ory$amnezic_elm$Init$init_default_question);
var _gre_ory$amnezic_elm$Init$init_default_player = F3(
	function (card_type, card_color, player_id) {
		return {
			name: A2(
				_elm_lang$core$Basics_ops['++'],
				'Player ',
				_elm_lang$core$Basics$toString(
					_gre_ory$amnezic_elm$Type$id_to_nb(player_id))),
			score: 0,
			active: true,
			card_type: card_type,
			card_color: card_color
		};
	});
var _gre_ory$amnezic_elm$Init$init_default_players = _elm_lang$core$Array$fromList(
	{
		ctor: '::',
		_0: A3(_gre_ory$amnezic_elm$Init$init_default_player, 'heart', 'red', 0),
		_1: {
			ctor: '::',
			_0: A3(_gre_ory$amnezic_elm$Init$init_default_player, 'uno', 'blue', 1),
			_1: {ctor: '[]'}
		}
	});
var _gre_ory$amnezic_elm$Init$init_state = {
	page: _gre_ory$amnezic_elm$Type$PageStart,
	question_id: 0,
	step: _gre_ory$amnezic_elm$Type$StepNotReady,
	media_status: _gre_ory$amnezic_elm$Type$MediaNotReady,
	selected_cards: _elm_lang$core$Array$fromList(
		{ctor: '[]'}),
	score_mode: _gre_ory$amnezic_elm$Type$ScoreByVelocity
};
var _gre_ory$amnezic_elm$Init$init_model = {
	questions: _gre_ory$amnezic_elm$Init$init_default_questions,
	players: _gre_ory$amnezic_elm$Init$init_default_players,
	state: _gre_ory$amnezic_elm$Init$init_state,
	available_card_types: _elm_lang$core$Array$fromList(
		{
			ctor: '::',
			_0: 'club',
			_1: {
				ctor: '::',
				_0: 'spade',
				_1: {
					ctor: '::',
					_0: 'heart',
					_1: {
						ctor: '::',
						_0: 'diamond',
						_1: {
							ctor: '::',
							_0: 'trump',
							_1: {
								ctor: '::',
								_0: 'uno',
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}),
	available_card_colors: _elm_lang$core$Array$fromList(
		{
			ctor: '::',
			_0: 'black',
			_1: {
				ctor: '::',
				_0: 'red',
				_1: {
					ctor: '::',
					_0: 'yellow',
					_1: {
						ctor: '::',
						_0: 'blue',
						_1: {
							ctor: '::',
							_0: 'green',
							_1: {ctor: '[]'}
						}
					}
				}
			}
		})
};
