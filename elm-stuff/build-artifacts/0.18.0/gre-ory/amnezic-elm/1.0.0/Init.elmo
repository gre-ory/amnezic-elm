var _gre_ory$amnezic_elm$Init$init_card = F3(
	function (card_suit, card_color, inverted_color) {
		return {card_suit: card_suit, card_color: card_color, inverted_color: inverted_color};
	});
var _gre_ory$amnezic_elm$Init$init_selected_card = F3(
	function (choice_id, player_id, correct) {
		return {choice_id: choice_id, player_id: player_id, engaged_point: 0, correct: correct};
	});
var _gre_ory$amnezic_elm$Init$init_default_choice = F2(
	function (choice_id, correct) {
		return {
			answer: A2(
				_elm_lang$core$Basics_ops['++'],
				'Answer ',
				_elm_lang$core$Basics$toString(
					_gre_ory$amnezic_elm$Type$id_to_nb(choice_id))),
			hint: A2(
				_elm_lang$core$Basics_ops['++'],
				'Hint ',
				_elm_lang$core$Basics$toString(
					_gre_ory$amnezic_elm$Type$id_to_nb(choice_id))),
			correct: correct
		};
	});
var _gre_ory$amnezic_elm$Init$init_default_question = function (question_id) {
	return {
		theme: A2(
			_elm_lang$core$Basics_ops['++'],
			'Theme ',
			_elm_lang$core$Basics$toString(
				_gre_ory$amnezic_elm$Type$id_to_nb(question_id))),
		audio: A2(
			_elm_lang$core$Basics_ops['++'],
			'audio_',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(
					_gre_ory$amnezic_elm$Type$id_to_nb(question_id)),
				'.mp3')),
		choices: _elm_lang$core$Array$fromList(
			function (l) {
				return function (l) {
					return function (l) {
						return function (l) {
							return function (l) {
								return function (l) {
									return A2(
										_elm_lang$core$Basics_ops['++'],
										l,
										{
											ctor: '::',
											_0: A2(_gre_ory$amnezic_elm$Init$init_default_choice, 5, false),
											_1: {ctor: '[]'}
										});
								}(
									A2(
										_elm_lang$core$Basics_ops['++'],
										l,
										{
											ctor: '::',
											_0: A2(_gre_ory$amnezic_elm$Init$init_default_choice, 4, false),
											_1: {ctor: '[]'}
										}));
							}(
								A2(
									_elm_lang$core$Basics_ops['++'],
									l,
									{
										ctor: '::',
										_0: A2(_gre_ory$amnezic_elm$Init$init_default_choice, 3, true),
										_1: {ctor: '[]'}
									}));
						}(
							A2(
								_elm_lang$core$Basics_ops['++'],
								l,
								{
									ctor: '::',
									_0: A2(_gre_ory$amnezic_elm$Init$init_default_choice, 2, false),
									_1: {ctor: '[]'}
								}));
					}(
						A2(
							_elm_lang$core$Basics_ops['++'],
							l,
							{
								ctor: '::',
								_0: A2(_gre_ory$amnezic_elm$Init$init_default_choice, 1, true),
								_1: {ctor: '[]'}
							}));
				}(
					A2(
						_elm_lang$core$Basics_ops['++'],
						l,
						{
							ctor: '::',
							_0: A2(_gre_ory$amnezic_elm$Init$init_default_choice, 0, false),
							_1: {ctor: '[]'}
						}));
			}(
				{ctor: '[]'}))
	};
};
var _gre_ory$amnezic_elm$Init$init_default_questions = A2(_elm_lang$core$Array$initialize, 4, _gre_ory$amnezic_elm$Init$init_default_question);
var _gre_ory$amnezic_elm$Init$init_default_player = F4(
	function (card_suit, card_color, inverted_color, player_id) {
		return {
			name: A2(
				_elm_lang$core$Basics_ops['++'],
				'Player ',
				_elm_lang$core$Basics$toString(
					_gre_ory$amnezic_elm$Type$id_to_nb(player_id))),
			score: 0,
			active: true,
			card: A3(_gre_ory$amnezic_elm$Init$init_card, card_suit, card_color, inverted_color)
		};
	});
var _gre_ory$amnezic_elm$Init$init_default_players = _elm_lang$core$Array$fromList(
	function (l) {
		return function (l) {
			return function (l) {
				return function (l) {
					return function (l) {
						return function (l) {
							return function (l) {
								return function (l) {
									return A2(
										_elm_lang$core$Basics_ops['++'],
										l,
										{
											ctor: '::',
											_0: A4(_gre_ory$amnezic_elm$Init$init_default_player, _gre_ory$amnezic_elm$Type$Dot, _gre_ory$amnezic_elm$Type$Blue, false, 7),
											_1: {ctor: '[]'}
										});
								}(
									A2(
										_elm_lang$core$Basics_ops['++'],
										l,
										{
											ctor: '::',
											_0: A4(_gre_ory$amnezic_elm$Init$init_default_player, _gre_ory$amnezic_elm$Type$Star, _gre_ory$amnezic_elm$Type$Black, false, 6),
											_1: {ctor: '[]'}
										}));
							}(
								A2(
									_elm_lang$core$Basics_ops['++'],
									l,
									{
										ctor: '::',
										_0: A4(_gre_ory$amnezic_elm$Init$init_default_player, _gre_ory$amnezic_elm$Type$Square, _gre_ory$amnezic_elm$Type$Yellow, false, 5),
										_1: {ctor: '[]'}
									}));
						}(
							A2(
								_elm_lang$core$Basics_ops['++'],
								l,
								{
									ctor: '::',
									_0: A4(_gre_ory$amnezic_elm$Init$init_default_player, _gre_ory$amnezic_elm$Type$Heart, _gre_ory$amnezic_elm$Type$Green, false, 4),
									_1: {ctor: '[]'}
								}));
					}(
						A2(
							_elm_lang$core$Basics_ops['++'],
							l,
							{
								ctor: '::',
								_0: A4(_gre_ory$amnezic_elm$Init$init_default_player, _gre_ory$amnezic_elm$Type$Club, _gre_ory$amnezic_elm$Type$Black, false, 3),
								_1: {ctor: '[]'}
							}));
				}(
					A2(
						_elm_lang$core$Basics_ops['++'],
						l,
						{
							ctor: '::',
							_0: A4(_gre_ory$amnezic_elm$Init$init_default_player, _gre_ory$amnezic_elm$Type$Diamond, _gre_ory$amnezic_elm$Type$Red, false, 2),
							_1: {ctor: '[]'}
						}));
			}(
				A2(
					_elm_lang$core$Basics_ops['++'],
					l,
					{
						ctor: '::',
						_0: A4(_gre_ory$amnezic_elm$Init$init_default_player, _gre_ory$amnezic_elm$Type$Spade, _gre_ory$amnezic_elm$Type$Black, false, 1),
						_1: {ctor: '[]'}
					}));
		}(
			A2(
				_elm_lang$core$Basics_ops['++'],
				l,
				{
					ctor: '::',
					_0: A4(_gre_ory$amnezic_elm$Init$init_default_player, _gre_ory$amnezic_elm$Type$Heart, _gre_ory$amnezic_elm$Type$Red, false, 0),
					_1: {ctor: '[]'}
				}));
	}(
		{ctor: '[]'}));
var _gre_ory$amnezic_elm$Init$init_state = {
	page: _gre_ory$amnezic_elm$Type$PagePlayers,
	question_id: 0,
	step: _gre_ory$amnezic_elm$Type$StepNotReady,
	media_status: _gre_ory$amnezic_elm$Type$MediaNotReady,
	selected_cards: _elm_lang$core$Array$fromList(
		{ctor: '[]'}),
	score_mode: _gre_ory$amnezic_elm$Type$ScoreByVelocity,
	maybe_modal_player_id: _elm_lang$core$Maybe$Nothing
};
var _gre_ory$amnezic_elm$Init$init_model = {
	questions: _gre_ory$amnezic_elm$Init$init_default_questions,
	players: _gre_ory$amnezic_elm$Init$init_default_players,
	state: _gre_ory$amnezic_elm$Init$init_state,
	available_card_suits: _elm_lang$core$Array$fromList(
		{
			ctor: '::',
			_0: _gre_ory$amnezic_elm$Type$Club,
			_1: {
				ctor: '::',
				_0: _gre_ory$amnezic_elm$Type$Spade,
				_1: {
					ctor: '::',
					_0: _gre_ory$amnezic_elm$Type$Heart,
					_1: {
						ctor: '::',
						_0: _gre_ory$amnezic_elm$Type$Diamond,
						_1: {
							ctor: '::',
							_0: _gre_ory$amnezic_elm$Type$Star,
							_1: {
								ctor: '::',
								_0: _gre_ory$amnezic_elm$Type$Dot,
								_1: {
									ctor: '::',
									_0: _gre_ory$amnezic_elm$Type$Square,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}),
	available_card_colors: _elm_lang$core$Array$fromList(
		{
			ctor: '::',
			_0: _gre_ory$amnezic_elm$Type$Black,
			_1: {
				ctor: '::',
				_0: _gre_ory$amnezic_elm$Type$Red,
				_1: {
					ctor: '::',
					_0: _gre_ory$amnezic_elm$Type$Yellow,
					_1: {
						ctor: '::',
						_0: _gre_ory$amnezic_elm$Type$Blue,
						_1: {
							ctor: '::',
							_0: _gre_ory$amnezic_elm$Type$Green,
							_1: {ctor: '[]'}
						}
					}
				}
			}
		})
};
